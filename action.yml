name: Create Repository
description: Creates and sets up a GitHub repository
branding:
  icon: plus
  color: green
inputs:
  name:
    description: Repository name
    required: true
  owner:
    description: Repository owner
    required: true
    default: ${{ github.repository_owner }}
  description:
    description: Repository description
    required: false
  visibility:
    description: Repository visiblity
    required: false
    default: private
  template:
    description: Template repository (owner/repo)
    required: false
  clone:
    description: Optionally clone the new repository
    required: false
    default: 'false'
  cancel-runs:
    description: Cancel initial workflow runs
    required: true
    default: 'false'
  delete-runs:
    description: Delete initial workflow runs (after cancellation)
    required: true
    default: 'true'
  token:
    description: GitHub personal access token
    required: true
    default: ${{ github.token }}
  
runs:
  using: composite
  steps:

    - name: Create Repository
      id: create-repo
      shell: bash
      env:
        NAME: ${{ inputs.name }}
        OWNER: ${{ inputs.owner }}
        DESCRIPTION: ${{ inputs.description }}
        VISIBILITY: ${{ inputs.visibility }}
        TEMPLATE: ${{ inputs.template }}
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        is_public=$([[ "${VISIBILITY,,}" == "public" ]] && echo true || echo)
        is_private=$([[ "${VISIBILITY,,}" != "public" ]] && echo true || echo)

        gh repo create "$OWNER/$NAME" \
          --description "$DESCRIPTION" \
          ${is_public:+--public} \
          ${is_private:+--private} \
          ${TEMPLATE:+--template "$TEMPLATE"}
          
        if [ -z "$TEMPLATE" ]; then
          exit 0
        fi

        default_branch=$(
          gh api \
            -H "Accept: application/vnd.github.v3+json" \
            "/repos/$TEMPLATE" | \
            jq -r '.default_branch'
        )

        # Wait for initial setup to complete (see https://github.com/cli/cli/issues/5118)
        while ! gh api "/repos/$OWNER/$NAME/branches/$default_branch" &> /dev/null
        do
          sleep 0.5
        done
        sleep 1

    - name: Clone Repository
      shell: bash
      if: inputs.clone == 'true'
      env:
        NAME: ${{ inputs.name }}
        OWNER: ${{ inputs.owner }}
        GITHUB_TOKEN: ${{ inputs.token }}
      run: git clone "https://$GITHUB_TOKEN@github.com/$OWNER/$NAME.git"

    - name: Count Push Workflows
      id: count-push-workflows
      shell: bash
      if: inputs.template != '' && inputs.cancel-runs == 'true'
      env:
        TEMPLATE: ${{ inputs.template }}
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        retry() {
          local retries=$1
          shift
          local cmd="$@"
          local i=0
          local exit_code
          local wait
          until eval "$cmd"; do
            exit_code=$?
            i=$(($i + 1))
            if [ $i -lt $retries ]; then
              sleep $i
            else
              return $exit_code
            fi
          done
          return 0
        }

        get_content () {
          local path="$1"
          echo "$(
            gh api \
              -H "Accept: application/vnd.github.v3+json" \
              "/repos/$TEMPLATE/contents/$path" |
            jq -r '.content' |
            base64 -d
          )"
        }

        has_push_trigger () { 
          local path="$1"
          local content=$(retry 5 get_content "'$path'")
          local on=$(echo "$content" | yq '.on')
          local tag="$(echo "$on" | yq 'tag')"
          local has_push_trigger='false'

          case $tag in
            "!!str")
              if [ "$on" = 'push' ]; then
                has_push_trigger='true'
              fi
              ;;

            "!!seq")
              has_push_trigger=$(echo "$on" | yq 'contains(["push"])')
              ;;

            "!!map")
              has_push_trigger=$(echo "$on" | yq 'has("push")')
              ;;
          esac
          
          echo "$has_push_trigger"
        }
        
        get_workflow_paths() {
          echo "$(
            gh api \
              -H "Accept: application/vnd.github.v3+json" \
              "/repos/$TEMPLATE/contents/.github/workflows" | \
              jq -r '.[].path'
          )"
        }
        
        count_push_workflows() {
          local workflow_paths=$(get_workflow_paths)
          local push_workflow_count=0
          for workflow_path in $workflow_paths; do
            if $(has_push_trigger "$workflow_path"); then
              ((push_workflow_count++))
            fi
          done
          echo $push_workflow_count
        }

        push_workflow_count=$(count_push_workflows)
        echo "::set-output name=count::$push_workflow_count"

    - name: Cancel Initial Workflow Runs
      shell: bash
      if: inputs.template != '' && inputs.cancel-runs == 'true'
      env:
        NAME: ${{ inputs.name }}
        OWNER: ${{ inputs.owner }}
        TEMPLATE: ${{ inputs.template }}
        DELETE: ${{ inputs.delete-runs }}
        PUSH_WORKFLOW_COUNT: ${{ steps.count-push-workflows.outputs.count }}
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        retry() {
          local retries=$1
          shift
          local cmd="$@"
          local i=0
          local exit_code
          local wait
          until eval "$cmd"; do
            exit_code=$?
            i=$(($i + 1))
            if [ $i -lt $retries ]; then
              sleep $i
            else
              return $exit_code
            fi
          done
          return 0
        }
        
        list_runs() {
          gh run list \
            --repo "$OWNER/$NAME" \
            --json event,createdAt,databaseId | \
          jq '.[] | select( .event == "push" )' | jq -s
        }
        
        cancellations_complete() {
          gh run list \
            --repo "$OWNER/$NAME" \
            --json status,databaseId | \
          jq \
            '.[] | all(select( [.databaseId | tostring] | inside($ARGS.positional) ); .status == "completed" )' \
            --args "$1"
        }
        
        cancel_run() {
          gh run cancel "$1" --repo "$OWNER/$NAME"
        }
        
        delete_run() {
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github.v3+json" \
            "/repos/$OWNER/$NAME/actions/runs/$1"
        }

        timeout=10
        delay=2
        cancelled=()
        now=$(date +%s)
        last_cancellation=$now
        while [[ $now < $(($last_cancellation + $timeout)) && ${#cancelled[@]} < $PUSH_WORKFLOW_COUNT  ]]; do
          runs=$(retry 5 list_runs)
          for (( i=0; i<$(echo "$runs" | jq length); i++ )); do
            run=$(echo "$runs" | jq --argjson i $i '.[$i]')
            run_id=$(echo "$run" | jq -r '.databaseId')
            cancel_at=$(($(date -d "$(echo "$run" | jq -r '.createdAt')" +%s) + $delay))
            if [[ ! " ${cancelled[*]} " =~ " $run_id " && $now > $cancel_at ]]; then
              retry 5 cancel_run $run_id
              cancelled+=($run_id)
              last_cancellation=$now
            fi
          done
          sleep 0.5
          now=$(date +%s)
        done
        
        run_ids=$(printf '%s ' "${cancelled[@]}" | xargs)
        
        # Await run cancellation
        while ! $(retry 5 cancellations_complete "'$run_ids'"); do
          sleep 0.5
        done
        
        # Delete runs
        if $DELETE; then
          for run_id in $run_ids; do
            retry 5 delete_run $run_id
          done
        fi

name: Create Repository
description: Creates a GitHub Repository
branding:
  icon: plus
  color: green
inputs:
  name:
    description: Repository name
    required: true
  owner:
    description: Repository owner
    required: true
    default: ${{ github.repository_owner }}
  visibility:
    description: Repository visibility
    required: true
    default: private
  token:
    description: GitHub access token
    required: true
    default: ${{ github.token }}
  description:
    description: Repository description
    required: false
  template:
    description: Repository template (e.g. nodes-app/example)
    required: false
  clone:
    description: Clone the newly created repository
    required: false
    default: 'false'
  cancel-runs:
    description: Cancel initial workflow runs
    required: false
    default: 'false'
  cancel-runs-selection:
    description: Optionally specify workflow names (like 'example.yml') separated by line breaks. Defaults to blank which selects all workflows.
    required: false
    default: ''
  delete-runs:
    description: Delete initial workflow runs (after cancellation)
    required: false
    default: 'true'
  undo-initial-commit:
    description: Clear commit history immediately after creating repository from template
    required: false
    default: 'false'

outputs:
  id:
    description: Repository ID
    value: ${{ steps.create-repo.outputs.id }}

runs:
  using: composite
  steps:
    
    - id: create-repo
      shell: bash
      env:
        NAME: ${{ inputs.name }}
        OWNER: ${{ inputs.owner }}
        VISIBILITY: ${{ inputs.visibility }}
        DESCRIPTION: ${{ inputs.description }}
        TEMPLATE: ${{ inputs.template }}
        USE_TEMPLATE: ${{ inputs.template != '' }}
        CLONE: ${{ inputs.clone == 'true' }}
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        visibility_lower_case="${VISIBILITY,,}"
        is_public=$([ "$visibility_lower_case" = "public" ] && echo true || echo)
        is_internal=$([ "$visibility_lower_case" = "internal" ] && echo true || echo)
        is_private=$([ -z "$is_public$is_internal" ] && echo true || echo)

        gh repo create "$OWNER/$NAME" \
          --description "$DESCRIPTION" \
          ${is_public:+--public} \
          ${is_internal:+--internal} \
          ${is_private:+--private} \
          ${TEMPLATE:+--template "$TEMPLATE"}
          
        if $USE_TEMPLATE; then
          # Wait for initial setup to complete (see https://github.com/cli/cli/issues/5118)
          default_branch=$(
            gh api \
              -H "Accept: application/vnd.github.v3+json" \
              "/repos/$TEMPLATE" | \
              jq -r '.default_branch'
          )
          while ! gh api "/repos/$OWNER/$NAME/branches/$default_branch" &> /dev/null; do
            sleep 0.5
          done
          sleep 1
        fi

        if $CLONE; then
          git clone "https://$GITHUB_TOKEN@github.com/$OWNER/$NAME.git"
        fi

        echo "::set-output name=id::$(gh repo view "$OWNER/$NAME" --json id --jq '.id')"

    - name: Undo Initial Commit
      if: inputs.template != '' && inputs.undo-initial-commit == 'true'
      uses: nodes-app/action-clear-commit-history@v1
      with:
        repository: ${{ inputs.owner }}/${{ inputs.name }}
        keep-contents: false
        token: ${{ inputs.token }}

    - name: Cancel Workflow Runs
      if: inputs.template != '' && inputs.cancel-runs == 'true'
      shell: bash
      env:
        NAME: ${{ inputs.name }}
        OWNER: ${{ inputs.owner }}
        CANCEL_RUNS_SELECTION: ${{ inputs.cancel-runs-selection }}
        DELETE_RUNS: ${{ inputs.delete-runs == 'true' }}
        UNDO_INITIAL_COMMIT: ${{ inputs.undo-initial-commit == 'true' }}
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        retry() {
          local retries=$1
          shift
          local cmd="$@"
          local i=0
          local exit_code
          local wait
          until eval "$cmd"; do
            exit_code=$?
            i=$(($i + 1))
            if [ $i -lt $retries ]; then
              sleep $i
            else
              return $exit_code
            fi
          done
          return 0
        }

        cancel_run() {
          gh run cancel "$1" --repo "$OWNER/$NAME"
        }
        
        delete_run() {
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github.v3+json" \
            "/repos/$OWNER/$NAME/actions/runs/$1"
        }

        workflow_ids=$(
          gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$OWNER/$NAME/actions/workflows" \
          | jq \
            -c \
            '
            if (env.CANCEL_RUNS_SELECTION == "") then (
              .workflows 
              | map(.id)
            ) else (
              (
                env.CANCEL_RUNS_SELECTION
                | split("\n")
                | 
                [
                  .[]
                  | select(. != "")
                ]
              ) as $workflow_names
              | 
              [
                .workflows[]
                | select(
                    .path
                    | ltrimstr(".github/workflows/") as $name
                    | any($workflow_names; . == $name)
                  ).id
              ]
            ) end
            '
        )

        timeout_seconds=10
        cancellation_delay_seconds=2
        cancelled='[]'
        last_cancellation=$(date +%s)
        while [ $(date +%s) -lt $(($last_cancellation + $timeout_seconds)) ]; do
          cancel_next=$(
            gh run list \
              --repo "$OWNER/$NAME" \
              --json createdAt,databaseId,workflowDatabaseId,status | \
            jq \
              --argjson workflow_ids "$workflow_ids" \
              --argjson cancelled "$cancelled" \
              --argjson cancellation_delay_seconds "$cancellation_delay_seconds" \
              '
              now as $now
              |
              [
                .[]
                | select(
                    .workflowDatabaseId as $workflow_id
                    | .status as $status
                    | (.createdAt | fromdateiso8601) as $created_at
                    | $status != "completed"
                      and any($workflow_ids[]; . == $workflow_id)
                      and all($cancelled[]; . != $workflow_id)
                      and $now > ($created_at + $cancellation_delay_seconds)
                  )
                | .databaseId
              ]
              '
          )
          if [ ! "$cancel_next" = '[]' ]; then
            $(
              echo "$cancel_next" \
              | jq \
                  -r \
                  '
                  [
                    .[]
                    | "retry 5 cancel_run \(.)"
                  ]
                  | join("; ")
                  '
            )
            cancelled=$(
              echo "$cancelled" \
              | jq \
                  --argjson add "$cancel_next" \
                  '. += $cancel_next'
            )
            last_cancellation=$(date +%s)
          fi
        done

        while $(
          gh run list \
            --repo "$OWNER/$NAME" \
            --json status,databaseId \
          | jq \
              --argjson cancelled "$cancelled" \
              '
              [
                .[]
                | select(
                    .databaseId as $id
                    | any($cancelled[]; . == $id)
                  )
              ]
              | any( .status != "completed" )
              '
        ); do
          sleep 0.5
        done
        
        if $DELETE_RUNS; then
          $(
            echo "$cancelled" \
            | jq \
                -r \
                '
                [
                  .[]
                  | "retry 5 delete_run \(.)"
                ]
                | join("; ")
                '
          )
        fi
